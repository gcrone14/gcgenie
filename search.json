[{"path":"https://gcrone14.github.io/gcgenie/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Gabriel Crone Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gcrone14.github.io/gcgenie/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Crone. Author, maintainer.","code":""},{"path":"https://gcrone14.github.io/gcgenie/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Crone G (2025). gcgenie: Handy Utilities Cleaning, Comparing, Visualizing Data. R package version 0.1.0, https://github.com/gcrone14/gcgenie.","code":"@Manual{,   title = {gcgenie: Handy Utilities for Cleaning, Comparing, and Visualizing Data},   author = {Gabriel Crone},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/gcrone14/gcgenie}, }"},{"path":"https://gcrone14.github.io/gcgenie/index.html","id":"gcgenie","dir":"","previous_headings":"","what":"Handy Utilities for Cleaning, Comparing, and Visualizing Data","title":"Handy Utilities for Cleaning, Comparing, and Visualizing Data","text":"gcgenie provides practical, easy--use R functions streamline data analysis, including rater cell comparison, custom ggplot2 themes, data cleaning utilities. Think personal code genie—limits wishes! Want learn available functions? Check Reference tab detailed documentation.","code":""},{"path":"https://gcrone14.github.io/gcgenie/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Handy Utilities for Cleaning, Comparing, and Visualizing Data","text":"can install development version gcgenie GitHub :","code":"# install.packages(\"pak\") pak::pak(\"gcrone14/gcgenie\")"},{"path":[]},{"path":"https://gcrone14.github.io/gcgenie/index.html","id":"rater-comparison","dir":"","previous_headings":"Examples","what":"Rater Comparison","title":"Handy Utilities for Cleaning, Comparing, and Visualizing Data","text":"gcgenie lets compare coding decisions two raters compare_raters(). want compare two vectors, can compare_vectors().","code":"library(gcgenie)  # Example data from two raters rater1 <- data.frame(   var_1 = c(1, 3, 2),   var_2 = c(2, 2, 2),   var_3 = c(NA, 1, 1) )  rater2 <- data.frame(   var_1 = c(1, 3, 2),   var_2 = c(2, 2, 1),   var_3 = c(3, 1, 0) )  # ---- Compare two raters cell-by-cell ---- compare_raters(rater1, rater2) #   var_1 var_2 var_3 # 1     1     2  NA/3 # 2     3     2     1 # 3     2  2/1  1/0  # Use custom symbols for clearer marking compare_raters(rater1, rater2,                beg_symbol = \"R1: \",                sep_symbol = \" | R2: \") #   var_1   var_2        var_3 # 1     1       2   R1: NA | R2: 3 # 2     3       2           1 # 3     2 R1: 2 | R2: 1 R1: 1 | R2: 0  # ---- Compare two vectors ---- vec1 <- c(\"yes\", \"yes\", \"no\", \"yes\", \"no\") vec2 <- c(\"no\",  \"yes\", \"no\", \"no\",  \"yes\")  compare_vectors(vec1, vec2) # [1] \"yes/no\" \"yes\" \"no\" \"yes/no\" \"no/yes\""},{"path":"https://gcrone14.github.io/gcgenie/index.html","id":"scoring","dir":"","previous_headings":"Examples","what":"Scoring","title":"Handy Utilities for Cleaning, Comparing, and Visualizing Data","text":"gcgenie also makes easy score test survey responses answer key. Use score score participants particular item, score_embed insert scores new column existing data set.","code":"library(gcgenie)  # Example responses from 4 participants on 3 questions responses <- data.frame(   q1 = c(NA, \"b\", \"b\", \"b\"),   q2 = c(\"d\", NA, \"d\", \"a\"),   q3 = c(\"c\", \"d\", \"c\", \"a\") )  # Correct answers answers <- c(\"b\", \"d\", \"c\")  # ---- Overall scores per participant ---- # Default: number correct (sum) score(responses, answers) # [1] 0 1 3 1  # Proportion correct score(responses, answers, display = \"prop\") # [1] 0.00 0.33 1.00 0.33  # Percentage correct score(responses, answers, display = \"perc\") # [1]  0 33 100 33  # ---- Scores per question ---- # Useful for checking item difficulty score(responses, answers, show_questions = TRUE) # [1] 2 2 2  score(responses, answers, display = \"prop\", show_questions = TRUE) # [1] 0.50 0.50 0.50  # ---- Embed scores back into dataset ---- # Adds a new column with participants' scores score_embed(responses, answers) #   q1   q2 q3 score # 1 <NA> d   c     0 # 2 b   <NA> d     1 # 3 b    d   c     3 # 4 b    a   a     1  # Store proportion correct instead of raw counts score_embed(responses, answers, display = \"prop\", name = \"prop_score\") #   q1   q2 q3 prop_score # 1 <NA> d   c       0.00 # 2 b   <NA> d       0.33 # 3 b    d   c       1.00 # 4 b    a   a       0.33"},{"path":"https://gcrone14.github.io/gcgenie/index.html","id":"counting","dir":"","previous_headings":"Examples","what":"Counting","title":"Handy Utilities for Cleaning, Comparing, and Visualizing Data","text":"gcgenie contains several useful count functions make tasks involving frequency data simpler. Use freq_count shortcut dplyr::count() useful defaults, unique_count count unique elements column delimeter-separated list, count_plot create useful plot count data.","code":"library(gcgenie)  # ---- Sample dataset ---- dat <- data.frame(   name = c(\"John\", \"Jane\", \"Jim\", \"Jill\", \"Joe\", \"Anna\"),   occupation = c(\"Academic\", \"Academic\", \"Librarian\", \"Firefighter\", \"Doctor\", \"Doctor\"),   native_language = c(\"En\", \"En\", \"Fr\", \"Fr\", \"En\", \"Fr\") )  # ---- freq_count() ---- # Basic frequency counts dat |> freq_count(occupation) #   occupation n perc_n # 1   Academic 2   33.3 # 2     Doctor 2   33.3 # 3  Librarian 1   16.7 # 4 Firefighter 1   16.7  # Multiple variables dat |> freq_count(occupation, native_language) #   occupation native_language n perc_n # 1   Academic              En 2   33.3 # 2     Doctor              En 1   16.7 # 3     Doctor              Fr 1   16.7 # 4  Librarian              Fr 1   16.7 # 5 Firefighter             Fr 1   16.7   # ---- unique_count() ---- # For delimited entries, e.g. multiple people in a single cell df <- tibble::tibble(person = c(\"Jane,Joe\", \"Joe\", \"Joe,Kai\", \"Kai\"))  # Count unique individuals df |> unique_count(person) #   person n perc_n # 1    Joe 3   50.0 # 2    Kai 2   33.3 # 3   Jane 1   16.7   # ---- count_plot() ---- # Make a bar plot of frequencies df |> unique_count(person) |> count_plot(person)  # With labels and adjusted horizontal offset df |> unique_count(person) |> count_plot(person, label = TRUE, hjust = 2)"},{"path":"https://gcrone14.github.io/gcgenie/index.html","id":"ggplot2-customizations","dir":"","previous_headings":"Examples","what":"ggplot2 Customizations","title":"Handy Utilities for Cleaning, Comparing, and Visualizing Data","text":"Lastly, gcgenie contains custom themes visually pleasing ggplot2 graphs. custom_theme light custom theme, custom_theme_dark() dark custom theme.","code":"library(gcgenie) library(ggplot2)  # ---- Example dataset ---- sample_dat <- data.frame(   x   = c(rnorm(5000, mean = 10, sd = 1),           rnorm(5000, mean = 6, sd = 1)),   y   = rnorm(10000, mean = 7, sd = 1),   grp = c(rep(\"Experimental\", 5000),           rep(\"Control\", 5000)) )  # ---- theme_custom() ---- # Histogram sample_dat |>   ggplot(aes(x)) +   geom_histogram(binwidth = 1, fill = \"royalblue\", color = \"black\", boundary = 1) +   labs(title = \"Histogram of x\") +   theme_custom()  # Boxplot sample_dat |>   ggplot(aes(x)) +   geom_boxplot() +   labs(title = \"Box Plot of x\") +   scale_y_discrete(name = NULL) +   xlim(0, 15) +   coord_flip() +   theme_custom()  # Scatterplot sample_dat |>   ggplot(aes(x, y)) +   geom_point() +   labs(title = \"Scatterplot of x and y\") +   theme_custom()  # Faceted with legend sample_dat |>   ggplot(aes(x, fill = grp)) +   geom_boxplot() +   labs(title = \"Box Plot of x\") +   scale_y_discrete(name = NULL) +   xlim(0, 15) +   coord_flip() +   facet_wrap(~grp) +   theme_custom()   # ---- theme_custom_dark() ---- # Histogram sample_dat |>   ggplot(aes(x)) +   geom_histogram(binwidth = 1, fill = \"royalblue\", color = \"white\", boundary = 1) +   labs(title = \"Histogram of x\") +   theme_custom_dark()  # Boxplot sample_dat |>   ggplot(aes(x)) +   geom_boxplot(outlier.color = \"white\") +   labs(title = \"Box Plot of x\") +   scale_y_discrete(name = NULL) +   xlim(0, 15) +   coord_flip() +   theme_custom_dark()  # Scatterplot sample_dat |>   ggplot(aes(x, y)) +   geom_point(color = \"white\") +   labs(title = \"Scatterplot of x and y\") +   theme_custom_dark()  # Faceted with legend sample_dat |>   ggplot(aes(x, fill = grp)) +   geom_boxplot(outlier.color = \"white\", color = \"white\") +   labs(title = \"Box Plot of x\") +   scale_y_discrete(name = NULL) +   xlim(0, 15) +   coord_flip() +   facet_wrap(~grp) +   theme_custom_dark()"},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_raters.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Two Raters' Codes Cell-by-Cell — compare_raters","title":"Compare Two Raters' Codes Cell-by-Cell — compare_raters","text":"Compares two matrices, data frames, tibbles rater codes, returning structure cell-level differences marked using beg_symbol sep_symbol.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_raters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Two Raters' Codes Cell-by-Cell — compare_raters","text":"","code":"compare_raters(   rater_1,   rater_2,   beg_symbol = \"\",   sep_symbol = \"/\",   output_class = NULL )"},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_raters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Two Raters' Codes Cell-by-Cell — compare_raters","text":"rater_1 Rater 1's data. Can matrix, data.frame, tibble. rater_2 Rater 2's data. Can matrix, data.frame, tibble. beg_symbol (Optional) text string appearing coder 1's code inconsistent cells. sep_symbol Text string separating coders' codes inconsistent cells. output_class (Optional) text string specifying output data . Can one : \"matrix\", \"data.frame\", \"tibble\". default, outputted data format rater_1.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_raters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Two Raters' Codes Cell-by-Cell — compare_raters","text":"data frame (input data.frame), tibble (input tibble), matrix (input matrix).","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_raters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Two Raters' Codes Cell-by-Cell — compare_raters","text":"","code":"X_dat <- data.frame(var_1 = c(1, 3, 2),                    var_2 = c(2, 2, 2),                    var_3 = c(NA, 1, 1)) Y_dat <- data.frame(var_1 = c(1, 3, 2),                    var_2 = c(2, 2, 1),                    var_3 = c(3, 1, 0)) compare_raters(X_dat, Y_dat) #>   var_1 var_2 var_3 #> 1     1     2  NA/3 #> 2     3     2     1 #> 3     2   2/1   1/0  # Can use different symbols than \\ to separate two raters' codes. # Separate different scores with \"or\": compare_raters(X_dat, Y_dat,                sep_symbol = \" or \") #>   var_1  var_2   var_3 #> 1     1      2 NA or 3 #> 2     3      2       1 #> 3     2 2 or 1  1 or 0  # Separate different scores with \"Rater 1:\" and \"Rater 2:\" compare_raters(X_dat, Y_dat,                beg_symbol = \"Rater 1: \",                sep_symbol = \"; Rater 2: \") #>   var_1                  var_2                   var_3 #> 1     1                      2 Rater 1: NA; Rater 2: 3 #> 2     3                      2                       1 #> 3     2 Rater 1: 2; Rater 2: 1  Rater 1: 1; Rater 2: 0"},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare All Elements from Two Vectors and Flag Inconsistencies — compare_vectors","title":"Compare All Elements from Two Vectors and Flag Inconsistencies — compare_vectors","text":"Compares elements two vectors element-wise, flagging inconsistency symbol denoted sep_symbol.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare All Elements from Two Vectors and Flag Inconsistencies — compare_vectors","text":"","code":"compare_vectors(vec1, vec2, beg_symbol = \"\", sep_symbol = \"/\")"},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare All Elements from Two Vectors and Flag Inconsistencies — compare_vectors","text":"vec1 First vector (length vec2). vec2 Second vector (length vec1). beg_symbol (Optional) text string appearing vec1's entry inconsistent elements. sep_symbol Text string separating vectors' values inconsistent elements.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare All Elements from Two Vectors and Flag Inconsistencies — compare_vectors","text":"character vector summarizing inconsistencies vectors.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_vectors.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compare All Elements from Two Vectors and Flag Inconsistencies — compare_vectors","text":"function compares two vectors returns vector compared entries. full data set two coders' entries across several variables, please use gcgenie::compare_raters().","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/compare_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare All Elements from Two Vectors and Flag Inconsistencies — compare_vectors","text":"","code":"# With character inputs char_1 <- c(\"yes\", \"yes\", \"no\", \"yes\", \"no\") char_2 <- c(\"no\", \"yes\", \"no\", \"no\", \"yes\") compare_vectors(char_1, char_2) #> [1] \"yes/no\" \"yes\"    \"no\"     \"yes/no\" \"no/yes\"  # With numeric inputs num_1 <- 1:5 num_2 <- 5:9 compare_vectors(num_1, num_2, sep_symbol = \";\") #> [1] \"1;5\" \"2;6\" \"3;7\" \"4;8\" \"5;9\"  # In tidy context # Suppose df <- data.frame(     rater_1 = char_1,     rater_2 = char_2 )  df |>     dplyr::mutate(compare_col = compare_vectors(rater_1, rater_2)) #>   rater_1 rater_2 compare_col #> 1     yes      no      yes/no #> 2     yes     yes         yes #> 3      no      no          no #> 4     yes      no      yes/no #> 5      no     yes      no/yes # With numeric inputs compare_vectors(1:3, 3:5) #> [1] \"1/3\" \"2/4\" \"3/5\""},{"path":"https://gcrone14.github.io/gcgenie/reference/count_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Count Plot from a Count Table — count_plot","title":"Generate a Count Plot from a Count Table — count_plot","text":"Generates column plot frequency table, categories sorted descending frequency.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/count_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Count Plot from a Count Table — count_plot","text":"","code":"count_plot(   dat,   var = NULL,   count_var = n,   head_n = nrow(dat),   label = FALSE,   hjust = -0.1 )"},{"path":"https://gcrone14.github.io/gcgenie/reference/count_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Count Plot from a Count Table — count_plot","text":"dat Frequency table (tibble, data.frame, matrix) includes categorical (counted grouped) corresponding count column (usually, 'n'). var categorical variable frequency table, unquoted. count_var count variable, usually 'n', unqouted. default, assumed 'n'. head_n number final unique values include plot. label (Optional) TRUE, provide text frequnecy count right bar. hjust (Optional) Horizontal offset x-axis labels; effective label = TRUE.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/count_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Count Plot from a Count Table — count_plot","text":"ggplot2 column plot frequencies.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/count_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Count Plot from a Count Table — count_plot","text":"","code":"df <- data.frame(person = c(\"Jane,Joe\", \"Joe\", \"Joe,Kai\", \"Kai\"))  # Regular count plot without labels df |> unique_count(person) |> count_plot(person)  # With labels df |> unique_count(person) |> count_plot(person, label = TRUE, hjust = 2)"},{"path":"https://gcrone14.github.io/gcgenie/reference/freq_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience wrapper to dplyr::count() — freq_count","title":"Convenience wrapper to dplyr::count() — freq_count","text":"Like dplyr::count(), always sorts descending adds perc_n column percentage total counts.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/freq_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience wrapper to dplyr::count() — freq_count","text":"","code":"freq_count(dat, ..., sort = TRUE)"},{"path":"https://gcrone14.github.io/gcgenie/reference/freq_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience wrapper to dplyr::count() — freq_count","text":"dat Data set matrix, data frame, tibble. ... Additional arguments add dplyr::count, variables count. sort (optional) set TRUE, sorts output higher-frequency items appear less frequent ones. Defaults TRUE.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/freq_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience wrapper to dplyr::count() — freq_count","text":"Returns object class dat: tibble, data frame, matrix.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/freq_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience wrapper to dplyr::count() — freq_count","text":"","code":"dat <- data.frame(     name = c(\"John\", \"Jane\", \"Jim\", \"Jill\", \"Joe\", \"Anna\"),     occupation = c(\"Academic\", \"Academic\", \"Librarian\", \"Firefighter\", \"Doctor\", \"Doctor\"),     native_language = c(\"En\", \"En\", \"Fr\", \"Fr\", \"En\", \"Fr\"))  dat |> freq_count(occupation) #>    occupation n   perc_n #> 1    Academic 2 33.33333 #> 2      Doctor 2 33.33333 #> 3 Firefighter 1 16.66667 #> 4   Librarian 1 16.66667 dat |> freq_count(native_language) #>   native_language n perc_n #> 1              En 3     50 #> 2              Fr 3     50 dat |> freq_count(occupation, native_language) #>    occupation native_language n   perc_n #> 1    Academic              En 2 33.33333 #> 2      Doctor              En 1 16.66667 #> 3      Doctor              Fr 1 16.66667 #> 4 Firefighter              Fr 1 16.66667 #> 5   Librarian              Fr 1 16.66667"},{"path":"https://gcrone14.github.io/gcgenie/reference/score.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiently Score Test Data — score","title":"Efficiently Score Test Data — score","text":"Scoring utility function takes data frame responses vector correct answers, returning overall test scores per participant per question.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiently Score Test Data — score","text":"","code":"score(responses, answers, display = \"sum\", show_questions = FALSE)"},{"path":"https://gcrone14.github.io/gcgenie/reference/score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiently Score Test Data — score","text":"responses Data set (tibble, data.frame, matrix) responses: columns items, rows respondents. answers Vector correct answers, ith element matching ith column response data. display (Optional) Character string specifying score display per participant: \"sum\" (total correct), \"prop\" (proportion correct), \"perc\" (percentage correct). show_questions (Optional) Logical. TRUE, displays scores per question instead per participant. Helps check questions scored correctly.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficiently Score Test Data — score","text":"numeric vector.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/score.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Efficiently Score Test Data — score","text":"participant answer question (.e., NA given cell), function assumes question answered incorrectly. function stricter score_embed","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiently Score Test Data — score","text":"","code":"responses <- data.frame( q1 = c(NA, \"b\", \"b\", \"b\"), q2 = c(\"d\", NA, \"d\", \"a\"), q3 = c(\"c\", \"d\", \"c\", \"a\") )  answers <- c(\"b\", \"d\", \"c\")  # Display scores per participant responses |> score(answers) #> [1] 2 1 3 1 responses |> score(answers, display = \"prop\") #> [1] 0.67 0.33 1.00 0.33 responses |> score(answers, display = \"perc\") #> [1]  66.67  33.33 100.00  33.33  # Display scores per question responses |> score(answers, show_questions = TRUE) #> [1] 3 2 2 responses |> score(answers, display = \"prop\", show_questions = TRUE) #> [1] 0.75 0.50 0.50 responses |> score(answers, display = \"perc\", show_questions = TRUE) #> [1] 75 50 50"},{"path":"https://gcrone14.github.io/gcgenie/reference/score_embed.html","id":null,"dir":"Reference","previous_headings":"","what":"Embed Scored Data into a Data Set — score_embed","title":"Embed Scored Data into a Data Set — score_embed","text":"Scoring utility function takes data frame responses vector correct answers, embedding overall test scores new column within inputted data set.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/score_embed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Embed Scored Data into a Data Set — score_embed","text":"","code":"score_embed(   responses,   answers,   cols = dplyr::everything(),   display = \"sum\",   name = \"score\" )"},{"path":"https://gcrone14.github.io/gcgenie/reference/score_embed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Embed Scored Data into a Data Set — score_embed","text":"responses Data set (tibble, data.frame, matrix) responses: columns items, rows respondents. answers Vector correct answers, ith element matching ith column response data. cols specification (e.g., q1:q10, starts_with(\"q\")) indicating columns contain responses scored. default, columns assumed contain responses scored. display (Optional) Character string specifying score display per participant: \"sum\" (total correct), \"prop\" (proportion correct), \"perc\" (percentage correct). name (Optional) Character string specifying call new score column.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/score_embed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Embed Scored Data into a Data Set — score_embed","text":"Returns object class 'responses': tibble, data frame, matrix.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/score_embed.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Embed Scored Data into a Data Set — score_embed","text":"participant answer question (.e., NA given cell), function assumes question answered incorrectly.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/score_embed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Embed Scored Data into a Data Set — score_embed","text":"","code":"responses <- data.frame(     q1 = c(NA, \"b\", \"b\", \"b\"),     q2 = c(\"d\", NA, \"d\", \"a\"),     q3 = c(\"c\", \"d\", \"c\", \"a\") )  responses_full <- data.frame(     var1 = c(TRUE, FALSE, TRUE, TRUE),     var2 = c(1, 4, 2.2, 6),     q1 = c(NA, \"b\", \"b\", \"b\"),     q2 = c(\"d\", NA, \"d\", \"a\"),     q3 = c(\"c\", \"d\", \"c\", \"a\") )  answers <- c(\"b\", \"d\", \"c\")  # Regular score embedding responses |> score_embed(answers) #>     q1   q2 q3 score #> 1 <NA>    d  c     2 #> 2    b <NA>  d     1 #> 3    b    d  c     3 #> 4    b    a  a     1 responses |> score_embed(answers, display = \"prop\") #>     q1   q2 q3 score #> 1 <NA>    d  c  0.67 #> 2    b <NA>  d  0.33 #> 3    b    d  c  1.00 #> 4    b    a  a  0.33 responses |> score_embed(answers, display = \"perc\") #>     q1   q2 q3  score #> 1 <NA>    d  c  66.67 #> 2    b <NA>  d  33.33 #> 3    b    d  c 100.00 #> 4    b    a  a  33.33  # Score embedding specifying columns to be scored responses_full |> score_embed(answers, cols = q1:q3) #>    var1 var2   q1   q2 q3 score #> 1  TRUE  1.0 <NA>    d  c     2 #> 2 FALSE  4.0    b <NA>  d     1 #> 3  TRUE  2.2    b    d  c     3 #> 4  TRUE  6.0    b    a  a     1 responses_full |> score_embed(answers, cols = dplyr::matches(\"^q\")) #>    var1 var2   q1   q2 q3 score #> 1  TRUE  1.0 <NA>    d  c     2 #> 2 FALSE  4.0    b <NA>  d     1 #> 3  TRUE  2.2    b    d  c     3 #> 4  TRUE  6.0    b    a  a     1 responses_full |> score_embed(answers, \"q1\":\"q3\") #>    var1 var2   q1   q2 q3 score #> 1  TRUE  1.0 <NA>    d  c     2 #> 2 FALSE  4.0    b <NA>  d     1 #> 3  TRUE  2.2    b    d  c     3 #> 4  TRUE  6.0    b    a  a     1"},{"path":"https://gcrone14.github.io/gcgenie/reference/theme_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Visually Appealing Custom ggplot2 Theme — theme_custom","title":"Visually Appealing Custom ggplot2 Theme — theme_custom","text":"Customized, clean theme ggplot2 graph.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/theme_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visually Appealing Custom ggplot2 Theme — theme_custom","text":"","code":"theme_custom()"},{"path":"https://gcrone14.github.io/gcgenie/reference/theme_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visually Appealing Custom ggplot2 Theme — theme_custom","text":"customized ggplot2 graph.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/theme_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visually Appealing Custom ggplot2 Theme — theme_custom","text":"","code":"sample_dat <- data.frame(x = c(rnorm(5000, mean = 10, sd = 1),                                rnorm(5000, mean = 6, sd = 1)),                          y = rnorm(10000, mean = 7, sd = 1),                          grp = c(rep(\"Experimental\", 5000),                                  rep(\"Control\", 5000)))  # Histogram example sample_dat |>     ggplot2::ggplot(ggplot2::aes(x)) +     ggplot2::geom_histogram(binwidth = 1, fill = \"royalblue\", color = \"black\", boundary = 1) +     ggplot2::labs(title = \"Histogram of x\") +     theme_custom()   # Box plot example sample_dat |>     ggplot2::ggplot(ggplot2::aes(x)) +     ggplot2::geom_boxplot() +     ggplot2::labs(title = \"Box Plot of x\") +     ggplot2::scale_y_discrete(name = NULL) +     ggplot2::xlim(0, 15) +     ggplot2::coord_flip() +     theme_custom()   # Scatterplot example sample_dat |>     ggplot2::ggplot(ggplot2::aes(x, y)) +     ggplot2::geom_point() +     ggplot2::labs(title = \"Scatterplot of x and y\") +     theme_custom()   # Sample plot with faceting and legend sample_dat |>     ggplot2::ggplot(ggplot2::aes(x, fill = grp)) +     ggplot2::geom_boxplot() +     ggplot2::scale_y_discrete(name = NULL) +     ggplot2::labs(title = \"Box Plot of x\") +     ggplot2::coord_flip() +     ggplot2::facet_wrap(~grp) +     ggplot2::xlim(0, 15) +     theme_custom()"},{"path":"https://gcrone14.github.io/gcgenie/reference/theme_custom_dark.html","id":null,"dir":"Reference","previous_headings":"","what":"Visually Appealing Custom ggplot2 Dark Theme — theme_custom_dark","title":"Visually Appealing Custom ggplot2 Dark Theme — theme_custom_dark","text":"Customized, clean dark theme ggplot2 graph.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/theme_custom_dark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visually Appealing Custom ggplot2 Dark Theme — theme_custom_dark","text":"","code":"theme_custom_dark()"},{"path":"https://gcrone14.github.io/gcgenie/reference/theme_custom_dark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visually Appealing Custom ggplot2 Dark Theme — theme_custom_dark","text":"customized ggplot2 graph.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/theme_custom_dark.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Visually Appealing Custom ggplot2 Dark Theme — theme_custom_dark","text":"dark themes, recommend setting color = \"white\" geom stat calls ensure better visibility.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/theme_custom_dark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visually Appealing Custom ggplot2 Dark Theme — theme_custom_dark","text":"","code":"sample_dat <- data.frame(x = c(rnorm(5000, mean = 10, sd = 1),                                rnorm(5000, mean = 6, sd = 1)),                          y = rnorm(10000, mean = 7, sd = 1),                          grp = c(rep(\"Experimental\", 5000),                                  rep(\"Control\", 5000)))  # Histogram example sample_dat |>     ggplot2::ggplot(ggplot2::aes(x)) +     ggplot2::geom_histogram(binwidth = 1, fill = \"royalblue\", color = \"white\", boundary = 1) +     ggplot2::labs(title = \"Histogram of x\") +     theme_custom_dark()   # Box plot example sample_dat |>     ggplot2::ggplot(ggplot2::aes(x)) +     ggplot2::geom_boxplot(outlier.color = \"white\") +     ggplot2::labs(title = \"Box Plot of x\") +     ggplot2::scale_y_discrete(name = NULL) +     ggplot2::xlim(0, 15) +     ggplot2::coord_flip() +     theme_custom_dark()   # Scatterplot example sample_dat |>     ggplot2::ggplot(ggplot2::aes(x, y)) +     ggplot2::geom_point(color = \"white\") +     ggplot2::labs(title = \"Scatterplot of x and y\") +     theme_custom_dark()   # Sample plot with faceting and legend sample_dat |>     ggplot2::ggplot(ggplot2::aes(x, fill = grp)) +     ggplot2::geom_boxplot(outlier.color = \"white\", color = \"white\") +     ggplot2::scale_y_discrete(name = NULL) +     ggplot2::labs(title = \"Box Plot of x\") +     ggplot2::coord_flip() +     ggplot2::facet_wrap(~grp) +     ggplot2::xlim(0, 15) +     theme_custom_dark()"},{"path":"https://gcrone14.github.io/gcgenie/reference/unique_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values Across Delimited Entries — unique_count","title":"Count Unique Values Across Delimited Entries — unique_count","text":"Generates frequency table categorical variable containing delimiter-separated values counting unique element.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/unique_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values Across Delimited Entries — unique_count","text":"","code":"unique_count(dat, var, delim = \",\", ...)"},{"path":"https://gcrone14.github.io/gcgenie/reference/unique_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values Across Delimited Entries — unique_count","text":"dat Data set (tibble, data.frame, matrix). var name variable (column) analyze, unquoted delim string indicating delimiter used separate values within cell. ... Additional arguments passed freq_count().","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/unique_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values Across Delimited Entries — unique_count","text":"Returns object class dat: tibble, data frame, matrix.","code":""},{"path":"https://gcrone14.github.io/gcgenie/reference/unique_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values Across Delimited Entries — unique_count","text":"","code":"df <- tibble::tibble(person = c(\"Jane,Joe\", \"Joe\", \"Joe,Kai\", \"Kai\"))  df |> unique_count(person) #> # A tibble: 3 × 3 #>   person     n perc_n #>   <chr>  <int>  <dbl> #> 1 Joe        3   50   #> 2 Kai        2   33.3 #> 3 Jane       1   16.7"}]
